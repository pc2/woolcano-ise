# include (${CMAKE_CURRENT_SOURCE_DIR}/../benchmarks/enable_llvm_toolflow.cmake)
# add_opt_pass(${CMAKE_CURRENT_SOURCE_DIR}/../ise/lib/ISEPass/libLLVMISEPass.so)

# execute_process(COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_SOURCE_DIR}/cos.txt ${CMAKE_CURRENT_BINARY_DIR}/cos.txt)

# file(RELATIVE_PATH foo ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_LISSRC_FILE})

# get the benchmarking apps list
# set(bench_dir ${CMAKE_CURRENT_SOURCE_DIR}/../benchmarks)
# file(GLOB inFiles ${bench_dir}/*)
# foreach(entry ${inFiles})
#   if(IS_DIRECTORY ${entry} AND EXISTS ${entry}/CMakeLists.txt)
#     message(${entry})
#    include (${entry}/CMakeLists.txt)
#   endif()
# endforeach(entry)


# include ("${bench_dir}/adpcm/CMakeLists.txt")
# get_target_property(foo libtiming OUTPUT_NAME)
# message(${foo})

#CONFIGURE_FILE(
#  "${LEVEL}/cmake/create_ise_pass_tests.cmake.in"
#  "${CMAKE_BINARY_DIR}/create_ise_pass_tests.cmake" 
#  @ONLY)


# 
# 
# # read path to pass from file generated by ise
# if(EXISTS ${CMAKE_BINARY_DIR}/llvm_ise_pass_file.cmake)
#   message("share_vars.cmake found")
#   include (${CMAKE_BINARY_DIR}/llvm_ise_pass_file.cmake)
#   if(${LLVM_ISE_PASS_FILE})
# #    include("${LEVEL}/cmake/enable_ise_pass_tests.cmake")
#     message(enabling: ${LLVM_ISE_PASS_fiLE})
#     add_opt_pass(${LLVM_ISE_PASS_FILE})
#     run_opt(sor_ise sor -ise -ise-output-graphs)
#   endif(${LLVM_ISE_PASS_FILE})
# else(EXISTS ${CMAKE_BINARY_DIR}/llvm_ise_pass_file.cmake)
#   message("share_vars.cmake not found")
# endif(EXISTS ${CMAKE_BINARY_DIR}/llvm_ise_pass_file.cmake)


# =========================================================== #
# This scripts launches opt with ise pass for given bc file
# inputs are specified with the preprocessor (-DFOO=BAR)
# params:
#    LEVEL      = level to top dir
#    BIN_DIR    = top binary dir
#    SRC_FILE   = src input .bc file for opt
#    PROF_FILE  = file with the profiling informations
#    O_FILE     = output file

# internal configuration
#    working_directory = output directory for the pass

# =========================================================== #
# 0. check if proper params are given
FILE(RELATIVE_PATH THIS_FILE ${CMAKE_CURRENT_BINARY_DIR} ${CMAKE_CURRENT_LIST_FILE})
message("\n=====================================================")
message("* Executing ${THIS_FILE}")
message("=====================================================\n")

if (NOT EXISTS ${SRC_FILE})
  message(FATAL_ERROR "file ${SRC_FILE} does not exists")
endif (NOT EXISTS ${SRC_FILE})
if (NOT EXISTS ${PROF_FILE})
  message(FATAL_ERROR "file ${PROF_FILE} does not exists")
endif (NOT EXISTS ${PROF_FILE})


# =========================================================== #
# 1. check if there is llvm pass compiled
set(ise_conf_file llvm_ise_pass_file.cmake)
set(ise_pass_file libLLVMISEPass.so)

# search for configuration file
find_file(ise_conf_full  ${ise_conf_file} HINT ${BIN_DIR})
if(ise_conf_full)
  include(${ise_conf_full})
# if not found than try to find the pass
else(ise_conf_full)
  find_file(LLVM_ISE_PASS_FILE ${ise_pass_file})
endif(ise_conf_full)

if(NOT EXISTS ${LLVM_ISE_PASS_FILE})
    message(FATAL_ERROR "LLVM ISE pass not found")
endif(NOT EXISTS ${LLVM_ISE_PASS_FILE})


# =========================================================== #
# 2. if found load enable_llvm_toolflow
set(f_llvm ${LEVEL}/cmake/enable_llvm_toolflow.cmake)
if (EXISTS ${f_llvm})
  include(${f_llvm})
endif (EXISTS ${f_llvm})


# =========================================================== #
# 3. run ise_pass on app
set(working_dir "test_ise")
add_opt_pass(${LLVM_ISE_PASS_FILE})
exec_opt(${O_FILE} ${SRC_FILE} ${working_dir}
  -ise -ise-output-graphs -ise-profile-info-file ${PROF_FILE})
